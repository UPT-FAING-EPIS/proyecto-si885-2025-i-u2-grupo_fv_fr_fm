name: Auto-Tag and Create Release on Main Push

on:
  push:
    branches:
      - main # O tu rama principal

permissions:
  contents: write # Necesario para hacer push de tags y crear releases

jobs:
  tag_and_release:
    runs-on: ubuntu-latest
    outputs: # Definir outputs a nivel de job si fueran necesarios para otros jobs, no estrictamente para este caso
      new_tag_created: ${{ steps.versioning.outputs.NEW_TAG_VALUE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para obtener todos los tags y el historial

      - name: Configure Git User
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      - name: Get Latest Tag and Calculate Next Version
        id: versioning # ID del paso para referenciar sus outputs
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Extraer partes de la versión (asumiendo formato vX.Y.Z)
          # Quitar la 'v' inicial
          VERSION_NO_V=$(echo $LATEST_TAG | sed 's/^v//')
          
          # Separar MAJOR.MINOR.PATCH
          MAJOR=$(echo $VERSION_NO_V | cut -d. -f1)
          MINOR=$(echo $VERSION_NO_V | cut -d. -f2)
          PATCH=$(echo $VERSION_NO_V | cut -d. -f3)
          
          # Incrementar PATCH (lógica de versionamiento simple)
          PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          
          echo "Calculated new tag: $NEW_TAG"
          # Establecer como output del paso para que otros pasos puedan usarlo
          echo "NEW_TAG_VALUE=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and Push New Tag
        # Solo ejecutar si se calculó un nuevo tag
        if: steps.versioning.outputs.NEW_TAG_VALUE != ''
        env: # Pasar el tag como variable de entorno para el script
          CALCULATED_NEW_TAG: ${{ steps.versioning.outputs.NEW_TAG_VALUE }}
        run: |
          # Verificar si el tag ya existe (por si acaso, aunque la lógica de incremento debería evitarlo)
          if git rev-parse ${{ env.CALCULATED_NEW_TAG }} >/dev/null 2>&1; then
            echo "Tag ${{ env.CALCULATED_NEW_TAG }} already exists. Skipping tag creation."
            # Si el tag ya existe, podríamos querer que los pasos de release no se ejecuten
            # o que se ejecuten si el contenido ha cambiado.
            # Por ahora, si existe, los siguientes pasos con 'if' no se ejecutarán si NEW_TAG_VALUE se vacía.
            # Para forzar que no continúe si el tag ya existe y no queremos re-release:
            # exit 1 # O alguna otra forma de indicar que no hay nuevo tag que procesar
          else
            echo "Creating tag ${{ env.CALCULATED_NEW_TAG }}"
            git tag ${{ env.CALCULATED_NEW_TAG }} -m "Automatic release ${{ env.CALCULATED_NEW_TAG }}"
            git push origin ${{ env.CALCULATED_NEW_TAG }}
            echo "Pushed tag ${{ env.CALCULATED_NEW_TAG }}"
          fi

      - name: Create Release Notes for New Tag
        if: steps.versioning.outputs.NEW_TAG_VALUE != '' # Condición basada en el output del paso 'versioning'
        env:
          NEW_TAG_FROM_STEP: ${{ steps.versioning.outputs.NEW_TAG_VALUE }}
        run: |
          echo "## Release Notes for ${{ env.NEW_TAG_FROM_STEP }}" > release_notes.md
          echo "" >> release_notes.md
          echo "Esta es la versión ${{ env.NEW_TAG_FROM_STEP }} de la Plataforma de Análisis del Mercado Laboral Tecnológico." >> release_notes.md
          echo "" >> release_notes.md
          echo "Cambios principales:" >> release_notes.md
          echo "- Actualización automática." >> release_notes.md

      - name: Zip Assets for New Tag
        if: steps.versioning.outputs.NEW_TAG_VALUE != ''
        env:
          NEW_TAG_FROM_STEP: ${{ steps.versioning.outputs.NEW_TAG_VALUE }}
        run: |
          mkdir release_package
          echo "Copiando archivos del release para el tag ${{ env.NEW_TAG_FROM_STEP }}..."
          if [ -f Programa/app_limpieza_ofertas.py ]; then
            cp Programa/app_limpieza_ofertas.py release_package/
            echo "Copiado: Programa/app_limpieza_ofertas.py"
          else
            echo "ADVERTENCIA: Programa/app_limpieza_ofertas.py no encontrado."
          fi
          
          if [ -f Programa/requirements.txt ]; then
            cp Programa/requirements.txt release_package/
            echo "Copiado: Programa/requirements.txt"
          else
            echo "ADVERTENCIA: Programa/requirements.txt no encontrado."
          fi
          
          echo "Creando archivo ZIP..."
          zip -r release_${{ env.NEW_TAG_FROM_STEP }}.zip release_package/
          echo "Archivo ZIP creado: release_${{ env.NEW_TAG_FROM_STEP }}.zip"

      - name: Create GitHub Release for New Tag
        if: steps.versioning.outputs.NEW_TAG_VALUE != ''
        uses: actions/create-release@v1
        id: create_new_release # ID para referenciar su output (upload_url)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.NEW_TAG_VALUE }} 
          release_name: Release ${{ steps.versioning.outputs.NEW_TAG_VALUE }}
          body_path: release_notes.md # Asegúrate que este archivo se cree con el nombre correcto
          draft: false
          prerelease: false

      - name: Upload Release Asset for New Tag
        if: steps.versioning.outputs.NEW_TAG_VALUE != '' && steps.create_new_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_new_release.outputs.upload_url }} 
          asset_path: ./release_${{ steps.versioning.outputs.NEW_TAG_VALUE }}.zip
          asset_name: plataforma_analisis_laboral_${{ steps.versioning.outputs.NEW_TAG_VALUE }}.zip
          asset_content_type: application/zip