name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
  push:
    branches: [ main ]
    paths: [ 'infra/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'infra/**' ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      
      # Crear nombre de bucket válido (solo minúsculas y guiones)
      - name: Set bucket name
        id: bucket
        run: |
          BUCKET_NAME="proyectointeligencia-terraform-state"
          echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
          echo "Bucket name: ${BUCKET_NAME}"
          echo "Bucket length: ${#BUCKET_NAME}"
      
      # Configurar backend remoto para persistir el state
      - name: Configure Terraform Backend
        run: |
          cat > infra/backend.tf << EOF
          terraform {
            backend "s3" {
              bucket = "${{ steps.bucket.outputs.bucket_name }}"
              key    = "terraform.tfstate"
              region = "us-east-2"
            }
          }
          EOF
      
      # Crear bucket para el state si no existe
      - name: Create State Bucket
        run: |
          aws s3api head-bucket --bucket "${{ steps.bucket.outputs.bucket_name }}" 2>/dev/null || \
          aws s3 mb s3://${{ steps.bucket.outputs.bucket_name }} --region us-east-2
      
      - name: Enable bucket versioning
        run: |
          aws s3api put-bucket-versioning \
            --bucket "${{ steps.bucket.outputs.bucket_name }}" \
            --versioning-configuration Status=Enabled
      
      - name: Terraform Init
        run: |
          cd infra
          terraform init
      
      - name: Terraform Validate
        run: |
          cd infra
          terraform validate
      
      - name: Terraform Plan
        id: plan
        run: |
          cd infra
          terraform plan -out=tfplan -no-color
        continue-on-error: true
      
      - name: Terraform Apply (manual dispatch)
        if: github.event.inputs.action == 'apply'
        run: |
          cd infra
          terraform apply -auto-approve tfplan
      
      - name: Terraform Apply (automatic on main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.action != 'destroy'
        run: |
          cd infra
          terraform apply -auto-approve tfplan
      
      - name: Terraform Destroy (manual only)
        if: github.event.inputs.action == 'destroy'
        run: |
          cd infra
          terraform destroy -auto-approve
      
      - name: Publish results
        run: |
          echo "## Terraform Plan Results" >> $GITHUB_STEP_SUMMARY
          echo "Action: ${{ github.event.inputs.action || 'auto' }}" >> $GITHUB_STEP_SUMMARY
          echo "State Bucket: ${{ steps.bucket.outputs.bucket_name }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v2
      
      - name: Setup inframap
        run: |
          curl -L -o /tmp/inframap.tar.gz "https://github.com/cycloidio/inframap/releases/download/v0.7.0/inframap-linux-amd64.tar.gz"
          tar -xzvf /tmp/inframap.tar.gz -C /tmp
          sudo mv /tmp/inframap-linux-amd64 /usr/local/bin/inframap
          sudo chmod +x /usr/local/bin/inframap
      
      - name: Generate inframap
        run: |
          cd infra
          inframap generate main.tf --raw | dot -Tsvg > inframap_aws.svg
        continue-on-error: true
      
      - name: Upload inframap
        uses: actions/upload-artifact@v4
        with:
          name: inframap-aws-diagram
          path: infra/inframap_aws.svg
        continue-on-error: true
      
      - name: Setup infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
        continue-on-error: true
      
      - name: Generate infracost report
        run: |
          cd infra
          infracost breakdown --path . --format html --out-file infracost-report.html
        continue-on-error: true
      
      - name: Upload infracost report to summary
        run: |
          echo "## Infracost Report" >> $GITHUB_STEP_SUMMARY
          if [ -f infra/infracost-report.html ]; then
            echo "Cost analysis completed successfully" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true
